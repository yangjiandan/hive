PREHOOK: query: DROP TABLE IF EXISTS test_n2
PREHOOK: type: DROPTABLE
PREHOOK: Output: database:default
POSTHOOK: query: DROP TABLE IF EXISTS test_n2
POSTHOOK: type: DROPTABLE
POSTHOOK: Output: database:default
PREHOOK: query: CREATE TABLE test_n2(ts TIMESTAMP) STORED AS ORC
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test_n2
POSTHOOK: query: CREATE TABLE test_n2(ts TIMESTAMP) STORED AS ORC
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test_n2
PREHOOK: query: INSERT INTO TABLE test_n2 VALUES ('0001-01-01 00:00:00.000000000'), ('9999-12-31 23:59:59.999999999')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@test_n2
POSTHOOK: query: INSERT INTO TABLE test_n2 VALUES ('0001-01-01 00:00:00.000000000'), ('9999-12-31 23:59:59.999999999')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@test_n2
POSTHOOK: Lineage: test_n2.ts SCRIPT []
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT ts FROM test_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT ts FROM test_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: false
  enabledConditionsNotMet: [hive.vectorized.execution.enabled IS false]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_n2
                  Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                  Select Operator
                    expressions: ts (type: timestamp)
                    outputColumnNames: _col0
                    Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                    File Output Operator
                      compressed: false
                      Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                      table:
                          input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                          output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                          serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: llap
            LLAP IO: all inputs

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT ts FROM test_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: SELECT ts FROM test_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
0001-01-01 00:00:00
9999-12-31 23:59:59.999999999
PREHOOK: query: SELECT MIN(ts), MAX(ts), MAX(ts) - MIN(ts) FROM test_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: SELECT MIN(ts), MAX(ts), MAX(ts) - MIN(ts) FROM test_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
0001-01-01 00:00:00	9999-12-31 23:59:59.999999999	3652058 23:59:59.999999999
PREHOOK: query: SELECT ts FROM test_n2 WHERE ts IN (timestamp '0001-01-01 00:00:00.000000000', timestamp '0002-02-02 00:00:00.000000000')
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: SELECT ts FROM test_n2 WHERE ts IN (timestamp '0001-01-01 00:00:00.000000000', timestamp '0002-02-02 00:00:00.000000000')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
0001-01-01 00:00:00
PREHOOK: query: SELECT ts FROM test_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: SELECT ts FROM test_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
0001-01-01 00:00:00
9999-12-31 23:59:59.999999999
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT MIN(ts), MAX(ts), MAX(ts) - MIN(ts) FROM test_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT MIN(ts), MAX(ts), MAX(ts) - MIN(ts) FROM test_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_n2
                  Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ts:timestamp, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>, 2:ROW__IS__DELETED:boolean]
                  Select Operator
                    expressions: ts (type: timestamp)
                    outputColumnNames: ts
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0]
                    Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: min(ts), max(ts)
                      Group By Vectorization:
                          aggregators: VectorUDAFMinTimestamp(col 0:timestamp) -> timestamp, VectorUDAFMaxTimestamp(col 0:timestamp) -> timestamp
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0, 1]
                      minReductionHashAggr: 0.5
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                            valueColumns: 0:timestamp, 1:timestamp
                        Statistics: Num rows: 1 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: timestamp), _col1 (type: timestamp)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 1
                    includeColumns: [0]
                    dataColumns: ts:timestamp
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 2
                    dataColumns: VALUE._col0:timestamp, VALUE._col1:timestamp
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: min(VALUE._col0), max(VALUE._col1)
                Group By Vectorization:
                    aggregators: VectorUDAFMinTimestamp(col 0:timestamp) -> timestamp, VectorUDAFMaxTimestamp(col 1:timestamp) -> timestamp
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1]
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: _col0 (type: timestamp), _col1 (type: timestamp), (_col1 - _col0) (type: interval_day_time)
                  outputColumnNames: _col0, _col1, _col2
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [0, 1, 2]
                      selectExpressions: TimestampColSubtractTimestampColumn(col 1:timestamp, col 0:timestamp) -> 2:interval_day_time
                  Statistics: Num rows: 1 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 92 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT MIN(ts), MAX(ts), MAX(ts) - MIN(ts) FROM test_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: SELECT MIN(ts), MAX(ts), MAX(ts) - MIN(ts) FROM test_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
0001-01-01 00:00:00	9999-12-31 23:59:59.999999999	3652058 23:59:59.999999999
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT ts FROM test_n2 WHERE ts IN (timestamp '0001-01-01 00:00:00.000000000', timestamp '0002-02-02 00:00:00.000000000')
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT ts FROM test_n2 WHERE ts IN (timestamp '0001-01-01 00:00:00.000000000', timestamp '0002-02-02 00:00:00.000000000')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_n2
                  filterExpr: (ts) IN (TIMESTAMP'0001-01-01 00:00:00', TIMESTAMP'0002-02-02 00:00:00') (type: boolean)
                  Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ts:timestamp, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>, 2:ROW__IS__DELETED:boolean]
                  Filter Operator
                    Filter Vectorization:
                        className: VectorFilterOperator
                        native: true
                        predicateExpression: FilterTimestampColumnInList(col 0:timestamp, values [0001-01-02 16:00:00.0, 0002-02-03 16:00:00.0])
                    predicate: (ts) IN (TIMESTAMP'0001-01-01 00:00:00', TIMESTAMP'0002-02-02 00:00:00') (type: boolean)
                    Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                    Select Operator
                      expressions: ts (type: timestamp)
                      outputColumnNames: _col0
                      Select Vectorization:
                          className: VectorSelectOperator
                          native: true
                          projectedOutputColumnNums: [0]
                      Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                      File Output Operator
                        compressed: false
                        File Sink Vectorization:
                            className: VectorFileSinkOperator
                            native: false
                        Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                        table:
                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 1
                    includeColumns: [0]
                    dataColumns: ts:timestamp
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT ts FROM test_n2 WHERE ts IN (timestamp '0001-01-01 00:00:00.000000000', timestamp '0002-02-02 00:00:00.000000000')
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: SELECT ts FROM test_n2 WHERE ts IN (timestamp '0001-01-01 00:00:00.000000000', timestamp '0002-02-02 00:00:00.000000000')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
0001-01-01 00:00:00
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT AVG(ts), CAST(AVG(ts) AS TIMESTAMP) FROM test_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT AVG(ts), CAST(AVG(ts) AS TIMESTAMP) FROM test_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_n2
                  Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ts:timestamp, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>, 2:ROW__IS__DELETED:boolean]
                  Select Operator
                    expressions: ts (type: timestamp)
                    outputColumnNames: ts
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0]
                    Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: sum(ts), count(ts)
                      Group By Vectorization:
                          aggregators: VectorUDAFSumTimestamp(col 0:timestamp) -> double, VectorUDAFCount(col 0:timestamp) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0, 1]
                      minReductionHashAggr: 0.5
                      mode: hash
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                            valueColumns: 0:double, 1:bigint
                        Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: double), _col1 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 1
                    includeColumns: [0]
                    dataColumns: ts:timestamp
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 2
                    dataColumns: VALUE._col0:double, VALUE._col1:bigint
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), count(VALUE._col1)
                Group By Vectorization:
                    aggregators: VectorUDAFSumDouble(col 0:double) -> double, VectorUDAFCountMerge(col 1:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1]
                mode: mergepartial
                outputColumnNames: _col0, _col1
                Statistics: Num rows: 1 Data size: 16 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: (_col0 / _col1) (type: double), CAST( (_col0 / _col1) AS TIMESTAMP) (type: timestamp)
                  outputColumnNames: _col0, _col1
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [2, 4]
                      selectExpressions: DoubleColDivideLongColumn(col 0:double, col 1:bigint) -> 2:double, CastDoubleToTimestamp(col 3:double)(children: DoubleColDivideLongColumn(col 0:double, col 1:bigint) -> 3:double) -> 4:timestamp
                  Statistics: Num rows: 1 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 48 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT AVG(ts), CAST(AVG(ts) AS TIMESTAMP) FROM test_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: SELECT AVG(ts), CAST(AVG(ts) AS TIMESTAMP) FROM test_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
9.5633352E10	5000-07-02 12:00:00
PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT variance(ts), var_pop(ts), var_samp(ts), std(ts), stddev(ts), stddev_pop(ts), stddev_samp(ts) FROM test_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: EXPLAIN VECTORIZATION DETAIL
SELECT variance(ts), var_pop(ts), var_samp(ts), std(ts), stddev(ts), stddev_pop(ts), stddev_samp(ts) FROM test_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
PLAN VECTORIZATION:
  enabled: true
  enabledConditionsMet: [hive.vectorized.execution.enabled IS true]

STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: test_n2
                  Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                  TableScan Vectorization:
                      native: true
                      vectorizationSchemaColumns: [0:ts:timestamp, 1:ROW__ID:struct<writeid:bigint,bucketid:int,rowid:bigint>, 2:ROW__IS__DELETED:boolean]
                  Select Operator
                    expressions: ts (type: timestamp), UDFToDouble(ts) (type: double), (UDFToDouble(ts) * UDFToDouble(ts)) (type: double)
                    outputColumnNames: _col0, _col1, _col2
                    Select Vectorization:
                        className: VectorSelectOperator
                        native: true
                        projectedOutputColumnNums: [0, 3, 6]
                        selectExpressions: CastTimestampToDouble(col 0:timestamp) -> 3:double, DoubleColMultiplyDoubleColumn(col 4:double, col 5:double)(children: CastTimestampToDouble(col 0:timestamp) -> 4:double, CastTimestampToDouble(col 0:timestamp) -> 5:double) -> 6:double
                    Statistics: Num rows: 2 Data size: 80 Basic stats: COMPLETE Column stats: COMPLETE
                    Group By Operator
                      aggregations: sum(_col2), sum(_col1), count(_col0)
                      Group By Vectorization:
                          aggregators: VectorUDAFSumDouble(col 6:double) -> double, VectorUDAFSumDouble(col 3:double) -> double, VectorUDAFCount(col 0:timestamp) -> bigint
                          className: VectorGroupByOperator
                          groupByMode: HASH
                          native: false
                          vectorProcessingMode: HASH
                          projectedOutputColumnNums: [0, 1, 2]
                      minReductionHashAggr: 0.5
                      mode: hash
                      outputColumnNames: _col0, _col1, _col2
                      Statistics: Num rows: 1 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                      Reduce Output Operator
                        null sort order: 
                        sort order: 
                        Reduce Sink Vectorization:
                            className: VectorReduceSinkEmptyKeyOperator
                            native: true
                            nativeConditionsMet: hive.vectorized.execution.reducesink.new.enabled IS true, hive.execution.engine tez IN [tez] IS true, No PTF TopN IS true, No DISTINCT columns IS true, BinarySortableSerDe for keys IS true, LazyBinarySerDe for values IS true
                            valueColumns: 0:double, 1:double, 2:bigint
                        Statistics: Num rows: 1 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                        value expressions: _col0 (type: double), _col1 (type: double), _col2 (type: bigint)
            Execution mode: vectorized, llap
            LLAP IO: all inputs
            Map Vectorization:
                enabled: true
                enabledConditionsMet: hive.vectorized.use.vectorized.input.format IS true
                inputFormatFeatureSupport: [DECIMAL_64]
                featureSupportInUse: [DECIMAL_64]
                inputFileFormats: org.apache.hadoop.hive.ql.io.orc.OrcInputFormat
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 1
                    includeColumns: [0]
                    dataColumns: ts:timestamp
                    partitionColumnCount: 0
                    scratchColumnTypeNames: [double, double, double, double]
        Reducer 2 
            Execution mode: vectorized, llap
            Reduce Vectorization:
                enabled: true
                enableConditionsMet: hive.vectorized.execution.reduce.enabled IS true, hive.execution.engine tez IN [tez] IS true
                reduceColumnNullOrder: 
                reduceColumnSortOrder: 
                allNative: false
                usesVectorUDFAdaptor: false
                vectorized: true
                rowBatchContext:
                    dataColumnCount: 3
                    dataColumns: VALUE._col0:double, VALUE._col1:double, VALUE._col2:bigint
                    partitionColumnCount: 0
                    scratchColumnTypeNames: []
            Reduce Operator Tree:
              Group By Operator
                aggregations: sum(VALUE._col0), sum(VALUE._col1), count(VALUE._col2)
                Group By Vectorization:
                    aggregators: VectorUDAFSumDouble(col 0:double) -> double, VectorUDAFSumDouble(col 1:double) -> double, VectorUDAFCountMerge(col 2:bigint) -> bigint
                    className: VectorGroupByOperator
                    groupByMode: MERGEPARTIAL
                    native: false
                    vectorProcessingMode: GLOBAL
                    projectedOutputColumnNums: [0, 1, 2]
                mode: mergepartial
                outputColumnNames: _col0, _col1, _col2
                Statistics: Num rows: 1 Data size: 24 Basic stats: COMPLETE Column stats: COMPLETE
                Select Operator
                  expressions: (if(((_col0 - ((_col1 * _col1) / _col2)) < 0), 0, (_col0 - ((_col1 * _col1) / _col2))) / _col2) (type: double), (if(((_col0 - ((_col1 * _col1) / _col2)) < 0), 0, (_col0 - ((_col1 * _col1) / _col2))) / _col2) (type: double), (if(((_col0 - ((_col1 * _col1) / _col2)) < 0), 0, (_col0 - ((_col1 * _col1) / _col2))) / if((_col2 = 1L), null, (_col2 - 1))) (type: double), power((if(((_col0 - ((_col1 * _col1) / _col2)) < 0), 0, (_col0 - ((_col1 * _col1) / _col2))) / _col2), 0.5) (type: double), power((if(((_col0 - ((_col1 * _col1) / _col2)) < 0), 0, (_col0 - ((_col1 * _col1) / _col2))) / _col2), 0.5) (type: double), power((if(((_col0 - ((_col1 * _col1) / _col2)) < 0), 0, (_col0 - ((_col1 * _col1) / _col2))) / _col2), 0.5) (type: double), power((if(((_col0 - ((_col1 * _col1) / _col2)) < 0), 0, (_col0 - ((_col1 * _col1) / _col2))) / if((_col2 = 1L), null, (_col2 - 1))), 0.5) (type: double)
                  outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
                  Select Vectorization:
                      className: VectorSelectOperator
                      native: true
                      projectedOutputColumnNums: [12, 22, 35, 46, 57, 68, 82]
                      selectExpressions: DoubleColDivideLongColumn(col 11:double, col 2:bigint)(children: IfExprColumnCondExpr(col 6:boolean, col 7:doublecol 10:double)(children: DoubleColLessLongScalar(col 5:double, val 0)(children: DoubleColSubtractDoubleColumn(col 0:double, col 4:double)(children: DoubleColDivideLongColumn(col 3:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 3:double) -> 4:double) -> 5:double) -> 6:boolean, ConstantVectorExpression(val 0.0) -> 7:double, DoubleColSubtractDoubleColumn(col 0:double, col 9:double)(children: DoubleColDivideLongColumn(col 8:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 8:double) -> 9:double) -> 10:double) -> 11:double) -> 12:double, DoubleColDivideLongColumn(col 21:double, col 2:bigint)(children: IfExprColumnCondExpr(col 16:boolean, col 17:doublecol 20:double)(children: DoubleColLessLongScalar(col 15:double, val 0)(children: DoubleColSubtractDoubleColumn(col 0:double, col 14:double)(children: DoubleColDivideLongColumn(col 13:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 13:double) -> 14:double) -> 15:double) -> 16:boolean, ConstantVectorExpression(val 0.0) -> 17:double, DoubleColSubtractDoubleColumn(col 0:double, col 19:double)(children: DoubleColDivideLongColumn(col 18:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 18:double) -> 19:double) -> 20:double) -> 21:double) -> 22:double, DoubleColDivideLongColumn(col 31:double, col 34:bigint)(children: IfExprColumnCondExpr(col 26:boolean, col 27:doublecol 30:double)(children: DoubleColLessLongScalar(col 25:double, val 0)(children: DoubleColSubtractDoubleColumn(col 0:double, col 24:double)(children: DoubleColDivideLongColumn(col 23:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 23:double) -> 24:double) -> 25:double) -> 26:boolean, ConstantVectorExpression(val 0.0) -> 27:double, DoubleColSubtractDoubleColumn(col 0:double, col 29:double)(children: DoubleColDivideLongColumn(col 28:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 28:double) -> 29:double) -> 30:double) -> 31:double, IfExprNullCondExpr(col 32:boolean, null, col 33:bigint)(children: LongColEqualLongScalar(col 2:bigint, val 1) -> 32:boolean, LongColSubtractLongScalar(col 2:bigint, val 1) -> 33:bigint) -> 34:bigint) -> 35:double, FuncPowerDoubleToDouble(col 45:double)(children: DoubleColDivideLongColumn(col 44:double, col 2:bigint)(children: IfExprColumnCondExpr(col 39:boolean, col 40:doublecol 43:double)(children: DoubleColLessLongScalar(col 38:double, val 0)(children: DoubleColSubtractDoubleColumn(col 0:double, col 37:double)(children: DoubleColDivideLongColumn(col 36:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 36:double) -> 37:double) -> 38:double) -> 39:boolean, ConstantVectorExpression(val 0.0) -> 40:double, DoubleColSubtractDoubleColumn(col 0:double, col 42:double)(children: DoubleColDivideLongColumn(col 41:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 41:double) -> 42:double) -> 43:double) -> 44:double) -> 45:double) -> 46:double, FuncPowerDoubleToDouble(col 56:double)(children: DoubleColDivideLongColumn(col 55:double, col 2:bigint)(children: IfExprColumnCondExpr(col 50:boolean, col 51:doublecol 54:double)(children: DoubleColLessLongScalar(col 49:double, val 0)(children: DoubleColSubtractDoubleColumn(col 0:double, col 48:double)(children: DoubleColDivideLongColumn(col 47:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 47:double) -> 48:double) -> 49:double) -> 50:boolean, ConstantVectorExpression(val 0.0) -> 51:double, DoubleColSubtractDoubleColumn(col 0:double, col 53:double)(children: DoubleColDivideLongColumn(col 52:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 52:double) -> 53:double) -> 54:double) -> 55:double) -> 56:double) -> 57:double, FuncPowerDoubleToDouble(col 67:double)(children: DoubleColDivideLongColumn(col 66:double, col 2:bigint)(children: IfExprColumnCondExpr(col 61:boolean, col 62:doublecol 65:double)(children: DoubleColLessLongScalar(col 60:double, val 0)(children: DoubleColSubtractDoubleColumn(col 0:double, col 59:double)(children: DoubleColDivideLongColumn(col 58:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 58:double) -> 59:double) -> 60:double) -> 61:boolean, ConstantVectorExpression(val 0.0) -> 62:double, DoubleColSubtractDoubleColumn(col 0:double, col 64:double)(children: DoubleColDivideLongColumn(col 63:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 63:double) -> 64:double) -> 65:double) -> 66:double) -> 67:double) -> 68:double, FuncPowerDoubleToDouble(col 81:double)(children: DoubleColDivideLongColumn(col 77:double, col 80:bigint)(children: IfExprColumnCondExpr(col 72:boolean, col 73:doublecol 76:double)(children: DoubleColLessLongScalar(col 71:double, val 0)(children: DoubleColSubtractDoubleColumn(col 0:double, col 70:double)(children: DoubleColDivideLongColumn(col 69:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 69:double) -> 70:double) -> 71:double) -> 72:boolean, ConstantVectorExpression(val 0.0) -> 73:double, DoubleColSubtractDoubleColumn(col 0:double, col 75:double)(children: DoubleColDivideLongColumn(col 74:double, col 2:bigint)(children: DoubleColMultiplyDoubleColumn(col 1:double, col 1:double) -> 74:double) -> 75:double) -> 76:double) -> 77:double, IfExprNullCondExpr(col 78:boolean, null, col 79:bigint)(children: LongColEqualLongScalar(col 2:bigint, val 1) -> 78:boolean, LongColSubtractLongScalar(col 2:bigint, val 1) -> 79:bigint) -> 80:bigint) -> 81:double) -> 82:double
                  Statistics: Num rows: 1 Data size: 56 Basic stats: COMPLETE Column stats: COMPLETE
                  File Output Operator
                    compressed: false
                    File Sink Vectorization:
                        className: VectorFileSinkOperator
                        native: false
                    Statistics: Num rows: 1 Data size: 56 Basic stats: COMPLETE Column stats: COMPLETE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT variance(ts), var_pop(ts), var_samp(ts), std(ts), stddev(ts), stddev_pop(ts), stddev_samp(ts) FROM test_n2
PREHOOK: type: QUERY
PREHOOK: Input: default@test_n2
#### A masked pattern was here ####
POSTHOOK: query: SELECT variance(ts), var_pop(ts), var_samp(ts), std(ts), stddev(ts), stddev_pop(ts), stddev_samp(ts) FROM test_n2
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test_n2
#### A masked pattern was here ####
2.4891041205457024E22	2.4891041205457024E22	4.978208241091405E22	1.577689488E11	1.577689488E11	1.577689488E11	2.2311898711430646E11
